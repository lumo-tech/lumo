# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package and create release
on: [ push ]

jobs:
  extract_version:
    runs-on: ubuntu-latest
    name: A job to generation version of current library
    outputs:
      version: ${{ steps.version.outputs.result }}
      exists: ${{ steps.check.outputs.exists }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get current version
        run: echo "result=v$(python extract_version.py)" >> $GITHUB_OUTPUT
        id: version
      - id: check
        run: echo "exists=$(echo $(git tag -l ${{ steps.version.outputs.result }}))" >> $GITHUB_OUTPUT
      - run: echo ${{ steps.version.outputs.result }}
      - run: echo ${{ steps.check.outputs.exists }}
      - run: echo ${{ steps.version.outputs.result == steps.check.outputs.exists }}

  create_tag:
    name: Create tag
    runs-on: ubuntu-latest
    needs: extract_version
    if: needs.extract_version.outputs.version != needs.extract_version.outputs.exists
    steps:
      - uses: actions/checkout@v3
      - uses: rickstaa/action-create-tag@v1
        with:
          tag: ${{needs.extract_version.outputs.version}}
          message: "Latest released version"
  publish:
    needs: [ extract_version,create_tag ]
    runs-on: ubuntu-latest
    name: A job to publish library on pypi
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
      - name: Build package
        run: python -m build
      - name: Publish package
        uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
        with:
          user: hzYang
          password: ${{ secrets.PYPI_API_TOKEN }}
  create_release:
    needs: [ create_tag,extract_version ]
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master
        with:
          fetch-depth: 0
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{needs.extract_version.outputs.version}}
          release_name: Release ${{needs.extract_version.outputs.version}}
          body: |
            Automatically created by Github Action.
            Latest commit message: ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
