# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package and create release
on: [ push ]

jobs:
  extract_version:
    runs-on: ubuntu-latest
    name: A job to generation version of current library
    outputs:
      can_publish: ${{ steps.version.outputs.full_version != steps.check.outputs.can_release }}
      can_release: ${{ steps.version.outputs.full_version != steps.check.outputs.can_publish }}
      full_version: ${{ steps.version.outputs.full_version }}
      pypi_version: ${{ steps.version.outputs.pypi_version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get current version
        run: |
          echo "pypi_version=v$(python extract_version.py)" >> $GITHUB_OUTPUT
          echo "full_version=v$(python extract_version.py).$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
        id: version
      - id: check
        run: |
          echo "can_publish=$(echo $(git tag -l "${{ steps.version.outputs.pypi_version }}*" | head -n 1))" >> $GITHUB_OUTPUT
          echo "can_release=$(echo $(git tag -l ${{ steps.version.outputs.full_version }}))" >> $GITHUB_OUTPUT
      - run: |
          echo $(git tag -l ${{ steps.version.outputs.full_version }})
          echo $(git tag -l "${{ steps.version.outputs.pypi_version }}*" | head -n 1)
          echo ${{ steps.version.outputs.full_version }}
          echo ${{ steps.version.outputs.pypi_version }}
          echo ${{ steps.check.outputs.can_publish }}
          echo ${{ steps.check.outputs.can_release }}
          echo ${{ steps.version.outputs.full_version != steps.check.outputs.can_release }}
          echo ${{ steps.version.outputs.full_version != steps.check.outputs.can_publish }}

  create_tag:
    name: Create tag
    runs-on: ubuntu-latest
    needs: extract_version
    if: ${{ needs.extract_version.outputs.can_publish }}
    steps:
      - uses: actions/checkout@v3
      - uses: rickstaa/action-create-tag@v1
        with:
          tag: ${{needs.extract_version.outputs.full_version}}
          message: "Latest released version"

  publish:
    needs: [ extract_version,create_tag ]
    if: ${{ needs.extract_version.outputs.can_publish }}
    runs-on: ubuntu-latest
    name: Publish on pypi
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'
      - name: Install dependenciesc
        run: |
          python -m pip install --upgrade pip
          pip install build
      - name: Build package
        run: python -m build
      - name: Publish package
        uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
        with:
          user: hzYang
          password: ${{ secrets.PYPI_API_TOKEN }}

  create_release:
    needs: [ create_tag,extract_version ]
    name: Create Release
    if: ${{ needs.extract_version.outputs.can_publish }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master
        with:
          fetch-depth: 0
      - uses: ncipollo/release-action@v1
        name: Create Release
        id: create_release
        with:
          tag: ${{needs.extract_version.outputs.full_version}}
          name: ${{needs.extract_version.outputs.full_version}}
          artifacts: "release.tar.gz,foo/*.txt"
          body: |
            Automatically created by Github Action.
            Latest commit message: ${{ github.event.head_commit.message }}
